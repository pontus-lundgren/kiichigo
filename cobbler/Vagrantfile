# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # config.vm.box = "generic/fedora28"
  config.vm.box = "f31-cloud-virtualbox"
  config.vm.box_url = "https://ftp.acc.umu.se/mirror/fedora/linux/releases/31/Cloud/x86_64/images/Fedora-Cloud-Base-Vagrant-31-1.9.x86_64.vagrant-virtualbox.box"
  config.ssh.insert_key = false
  # config.vm.box_check_update = false

   config.vm.network "forwarded_port", guest: 80, host: 80

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network"

  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.synced_folder ".", "/home/vagrant/devel", type: "sshfs"

  Dir.mkdir('.dnf-cache') unless File.exists?('.dnf-cache')
  config.vm.synced_folder ".dnf-cache", "/var/cache/dnf", type: "sshfs"
  config.vm.provision "shell", inline: <<-EOF
    systemctl is-system-running --wait
    sudo dnf -y upgrade 
    sudo dnf -y install libguestfs-tools-c
  EOF
  # sudo dnf -y install python2-dnf libselinux-python

  config.vm.provision "ansible" do |ansible|
      ansible.playbook = "devel/ansible/vagrant-playbook.yml"
  end

  config.vm.define "podman" do |podman|
     podman.vm.host_name = "podman-dev.example.com"
 
     podman.vm.provider :virtualbox do |domain|
         # Season to taste
#         domain.cpus = 4
#         domain.graphics_type = "spice"
         domain.memory = 2048
#         domain.video_type = "qxl"
 
         # Uncomment the following line if you would like to enable libvirt's unsafe cache
         # mode. It is called unsafe for a reason, as it causes the virtual host to ignore all
         # fsync() calls from the guest. Only do this if you are comfortable with the possibility of
         # your development guest becoming corrupted (in which case you should only need to do a
         # vagrant destroy and vagrant up to get a new one).
         #
         # domain.volume_cache = "unsafe"
     end
  end
end
